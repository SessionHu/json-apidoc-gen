{-
  json-apidoc-gen
  Copyright (C) 2025 SessionHu

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-}

module Main where

import qualified Data.ByteString.Lazy as BSL
import qualified Data.ByteString as BS
import qualified Data.Vector as V
import Control.Monad (when)
import Data.Aeson (Value(..), decode)
import Data.Aeson.Encode.Pretty (Indent(..), encodePretty', defConfig, confIndent)
import Data.Aeson.KeyMap (KeyMap, toList)
import Data.Aeson.Key (toString)
import Data.Text (unpack)
import Data.Text.Encoding (decodeUtf8)
import Data.Time.Format.ISO8601 (iso8601Format, formatShowM)
import Data.Time.Clock (getCurrentTime)
import Data.Version (showVersion)
import Data.Maybe (listToMaybe)
import Paths_json_apidoc_gen (version)
import System.IO (stderr, stdin, hPutStrLn)
import System.Environment (getArgs)
import System.Exit (exitSuccess)

readJsonStream :: Int -> IO BSL.ByteString
readJsonStream chunkSize = do
  let readChunks = do
        chunk <- BS.hGetSome stdin chunkSize
        if BS.null chunk
          then return []
          else (chunk :) <$> readChunks
  BSL.fromChunks <$> readChunks

getArrayType :: V.Vector Value -> String
getArrayType arr
  | V.null arr = "unknown[]"
  | otherwise =
      let loop t e
            | V.null e = t ++ "[]"
            | otherwise =
                let a = getValueType $ V.head e
                in if a == t then loop a $ V.tail e
                   else "any[]"
      in loop (getValueType $ V.head arr) (V.tail arr)

getValueType :: Value -> String
getValueType v = case v of
  Object _ -> "object"
  Array ar -> getArrayType ar
  String _ -> "string"
  Number _ -> "number"
  Bool _ -> "boolean"
  Null -> "null"

sanitizePath :: String -> String
sanitizePath pth = case listToMaybe pth of
  Just '.' -> drop 1 pth
  _ -> pth

printObjectKV :: String -> KeyMap Value -> IO ()
printObjectKV path obj = do
  let entries = toList obj
      cleanPath = sanitizePath path
      header = case (cleanPath, listToMaybe cleanPath) of
        ("", _) -> "根对象:"
        (p, Just ']') -> "`" ++ p ++ "`中的对象:"
        (p, _) -> "`" ++ p ++ "` 对象:"
  putStrLn header
  putStrLn "\n| 字段 | 类型 | 内容 | 备注 |"
  putStrLn   "| ---- | ---- | ---- | ---- |"
  mapM_ (\(k, v) ->
    putStrLn $ "| " ++ toString k ++ " | " ++ getValueType v ++ " |  |  |"
    ) entries
  putStrLn ""
  mapM_ (\(k, v) -> handleNestedObject (cleanPath ++ "." ++ toString k) v) entries

handleNestedObject :: String -> Value -> IO ()
handleNestedObject path v = case v of
  Object o -> printObjectKV path o
  Array arr -> case arr V.!? 0 of
    Just (Object o) -> printObjectKV (path ++ "[]") o
    _ -> pure ()
  _ -> pure ()

printVersion :: IO ()
printVersion = do
  putStrLn $
    "json-apidoc-gen " ++ showVersion version ++ "\n" ++
    "Copyright (C) 2025 SessionHu\n" ++
    "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n" ++
    "This is free software: you are free to change and redistribute it.\n" ++
    "There is NO WARRANTY, to the extent permitted by law."
  exitSuccess

printHelp :: IO ()
printHelp = do
  putStrLn $
    "Usage:\n" ++
    "  --mininal  only output `JSON Response` forms\n" ++
    "  --help     display this help and exit\n" ++
    "  --version  output version information and exit"
  exitSuccess

main :: IO ()
main = do
  args <- getArgs
  when ("--help" `elem` args) printHelp
  when ("--version" `elem` args) printVersion
  let notmininal = "--mininal" `notElem` args
  jsonData <- readJsonStream 4096
  case decode jsonData of
    Just (Object o) -> do
      when notmininal $
        putStrLn $
          "## title\n\n" ++
          "> https://\n\n" ++
          "*请求方法: *\n\n" ++
          "认证方式: \n\n" ++
          "**URL 参数:**\n\n" ++
          "**JSON 回复:**\n"
      printObjectKV "" o
      when notmininal $
        putStrLn $
          "**示例:**\n\n" ++
          "```shell\ncurl -\n```\n\n" ++
          "<details>\n<summary>查看响应示例:</summary>\n\n" ++
          "```json\n" ++
          unpack (decodeUtf8 $ BSL.toStrict $ encodePretty' defConfig { confIndent = Spaces 2 } o) ++
          "\n```\n" ++
          "</details>\n"
      putStr "<!-- Generated by json-apidoc-gen "
      utctime <- getCurrentTime
      putStrLn $ case formatShowM iso8601Format utctime of
        Just s -> "@ " ++ s ++ " -->"
        Nothing -> "-->"
    Just val -> hPutStrLn stderr $ "Not Object root: " ++ getValueType val
    Nothing -> hPutStrLn stderr "Not valid JSON input"
